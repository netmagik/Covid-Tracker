{"version":3,"sources":["components/Chart/Chart.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/States/States.js","components/Countries/Countries.js","components/Footer/Footer.js","images/covid.png","App.js","index.js","components/Countries/Countries.module.css","components/Cards/Cards.module.css","components/States/States.module.css","App.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","createMuiTheme","palette","primary","main","dark","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","variant","gutterBottom","color","start","end","value","duration","separator","Date","toDateString","Loader","active","inline","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","myRequest","Request","method","mode","fetch","map","positive","death","date","dateChecked","reverse","fetchCountries","countries","name","console","log","fetchStates","stateData","state","tot_cases","tot_death","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","fontSize","Paper","elevation","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","selectCountry","FormControl","formControl","NativeSelect","select","defaultValue","onChange","e","target","i","State","setStateData","order","setOrder","orderBy","setOrderBy","updatedData","setUpdatedData","StyledTableCell","withStyles","root","padding","head","fontWeight","textTransform","body","TableCell","StyledTableRow","theme","action","hover","TableRow","formatNumber","num","toString","replace","descendingComparator","b","headCells","id","numeric","EnhancedTableHead","props","onRequestSort","TableHead","headCell","align","width","sortDirection","TableSortLabel","direction","onClick","property","event","tableBody","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","scope","style","count","now","TableContainer","table","Table","stickyHeader","aria-label","Countries","countryData","setCountryData","then","json","grouped","reduce","x","countryRegion","push","tableData","Object","entries","forEach","iso2","mortality","parseFloat","Math","round","toFixed","fetchStats","Flag","toLowerCase","TextField","newData","slice","filter","includes","trim","filterByCountry","Footer","Box","p","Link","href","App","fetchedData","setState","this","header","logo","image","alt","src","coronaImage","nav","States","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d0dd573.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid, createMuiTheme } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport {  Loader } from 'semantic-ui-react';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n\n    const theme = createMuiTheme({\n     \n        palette: {\n          primary: {\n            main: 'rgba(0,0,255,0.5)',\n            dark: 'rgba(0,255,0,0.5)'\n          }\n        }\n      });\n\n\n    if(!confirmed) {\n        return  <Loader active inline=\"centered\">Loading...</Loader>\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1>World COVID-19 DATA</h1>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography variant=\"h5\" gutterBottom>\n                            INFECTED\n                        </Typography>\n                        <Typography color=\"primary\" variant=\"h3\">\n                            <CountUp \n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography>\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography variant=\"h5\" gutterBottom>\n                            RECOVERED\n                        </Typography>\n                        <Typography variant=\"h3\">\n                        <CountUp \n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography>\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of recoveries from COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography variant=\"h5\" gutterBottom>\n                            DEATHS\n                        </Typography>\n                        <Typography variant=\"h3\" color=\"error\">\n                        <CountUp \n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography>\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Deaths caused by COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nexport const url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableURL = url;\n    if (country) {\n        changeableURL = `${url}/countries/${country}`\n    }\n    try{\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n    }\n}\n\n// export const fetchDailyData = async () => {\n//     try {\n//         const {data} = await axios.get(`https://api.covidtracking.com/v1/us/daily.json`)\n        \n//         return data\n//             .map(({ positive, death, dateChecked}) => ({\n//             confirmed: positive,\n//             deaths: death,\n//             date: dateChecked,\n//         }))\n//             .reverse();\n\n//     } catch (error) {\n//         return error;\n//     }\n// }\n\nexport const fetchDailyData = async () => {\n    try {\n        const url = 'https://api.covidtracking.com/v1/us/daily.json';\n        const myInit = {\n            method: 'HEAD',\n            mode: 'no-cors',\n        };\n\n        const myRequest = new Request(url, myInit);\n\n        const {data} = await fetch(myRequest)\n        \n        return data\n            .map(({ positive, death, dateChecked}) => ({\n            confirmed: positive,\n            deaths: death,\n            date: dateChecked,\n        }))\n            .reverse();\n\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get('https://covid19.mathdro.id/api/countries');\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const fetchStates = async () => {\n    try {\n        const { data } = await axios.get('https://data.cdc.gov/resource/9mfq-cb36.json');\n        return data.map((stateData) => ({\n            state: stateData.state, \n            positive: stateData.tot_cases,\n            death: stateData.tot_death,\n            // hospitalized: stateData.hospitalizedCurrently\n         }))\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Paper } from '@material-ui/core';\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({ data: {confirmed, deaths, recovered}, country }) => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    }, [dailyData])\n\n    // LINE CHART\n    const lineChart = (\n        // if dailyData is available return Line Chart\n        dailyData.length \n        ? (<Line\n            data={\n                {\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }}\n              \n            />\n            // but if it's not available return null\n            ): null\n    )\n\n\n    // BAR CHART\n    const barChart = (\n        confirmed \n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [\n                        {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(255,0,0,0.5)',\n                            'rgba(0,255,0,0.5)',\n                            'rgba(0,0,255,0.5)'],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    }\n                ],\n                }} \n                options={{\n                    legend: { display: false },\n                    title: { \n                        display: true, \n                        text: `Current state in ${country}`,\n                        fontSize: 30 },\n                }}  \n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            <Paper elevation={3}>\n            {country ? barChart : lineChart}  \n            </Paper>\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    }, [])\n\n\n    return (\n        <div className={styles.selectCountry}>\n        <h1>Select Country</h1>\n        <FormControl className={styles.formControl}>\n            <NativeSelect className={styles.select} defaultValue=\"\" onChange={(e) => \n                handleCountryChange(e.target.value)}>\n\n                <option value=\"\">United States</option>\n                {fetchedCountries.map((country, i) => \n                <option key={i} value={country}>\n                    {country}\n                </option>\n\n                )}\n            </NativeSelect>\n        </FormControl>\n        </div>\n    )\n}\n\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, Grid } from '@material-ui/core';\nimport { fetchStates } from '../../api/';\nimport styles from './States.module.css';\n\nconst State = (state) => {\n\n    const [stateData, setStateData] = useState([]);\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('positive');\n    const [updatedData, setUpdatedData] = useState([]);\n\n    // Get DATA from the API\n    useEffect(() => {\n        const fetchAPI = async () => {\n          const data = await fetchStates(state);\n            setStateData(data);\n            setUpdatedData(data);\n        }\n        fetchAPI();\n    }, [state])\n\n    // STYLES\n    const StyledTableCell = withStyles(() => ({\n      root: {\n        padding: '10px'\n\n      },\n        head: {\n          fontWeight: 'bold',\n          textTransform: 'uppercase',\n          fontSize: '1rem'\n        },\n        body: {\n          fontSize: 18,\n          fontWeight: 'bold'\n        },\n      }))(TableCell);\n\n      const StyledTableRow = withStyles((theme) => ({\n        root: {\n          '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n          },\n          padding: '0'\n        },\n      }))(TableRow);\n\n      // Format Numbers with commas\n      function formatNumber(num) {\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n      }\n\n      // Sort functions\n      function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n          return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n          return 1;\n        }\n        return 0;\n      }\n      \n      function getComparator(order, orderBy) {\n        return order === 'asc'\n          ? (a, b) => descendingComparator(a, b, orderBy)\n          : (a, b) => -descendingComparator(a, b, orderBy);\n      }\n      \n      function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n          const order = comparator(a[0], b[0]);\n          if (order !== 0) return order;\n          return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n      }\n\n      // Array of Column Headings\n    const headCells = [\n        { id: \"state\", label: \"STATE\" },\n        { id: \"positive\", numeric: true, label: \"POSITIVE\" },\n        { id: \"death\", numeric: true, label: \"DEATHS\" },\n        // { id: \"hospitalized\", numeric: true, label: \"HOSPITALIZED\" },\n    ];\n\n    function EnhancedTableHead(props) {\n        const {order, orderBy, onRequestSort } = props;\n        const createSortHandler = (property) => (event) => {\n          onRequestSort(event, property);\n        };        \n\n    return (\n                    <TableHead className={styles.head}>\n                        <TableRow>\n                        {headCells.map(headCell => (\n                           <StyledTableCell\n                             key={headCell.id}\n                             align=\"left\"\n                             width=\"50\"\n                             sortDirection={orderBy === headCell.id ? order : false}\n                           >\n                             <TableSortLabel\n                               active={orderBy === headCell.id}\n                               direction={orderBy === headCell.id ? order : \"asc\"}\n                               onClick={createSortHandler(headCell.id)}\n                             >\n                               {headCell.label}\n                               {orderBy === headCell.id ? (\n                                 <span>\n                                   {order === \"desc\"}\n                                 </span>\n                               ) : null}\n                             </TableSortLabel>\n                           </StyledTableCell>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n    );\n    }\n\n    EnhancedTableHead.propTypes = {\n        onRequestSort: PropTypes.func.isRequired,\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n        orderBy: PropTypes.string.isRequired,\n      };\n\n    const tableBody = (\n    <TableBody>\n        {stableSort(updatedData, getComparator(order, orderBy))\n            .map((data) => {\n                return (\n                    <StyledTableRow key={Date.now()}>\n                    <StyledTableCell width='100' component=\"th\" scope=\"row\">\n                        {data.state}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(0, 139, 139, 0.8)' }}>\n                        {formatNumber(data.positive)}\n                        <p className={styles.count}>confirmed</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(255, 0, 0, 0.8)' }}>\n                        {formatNumber(data.death)}\n                        <p className={styles.count}>deaths</p>\n                    </StyledTableCell>\n                    {/* <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(139, 139, 255, 0.9)' }}>\n                        {data.hospitalized > 0 ? formatNumber(data.hospitalized) : 0}\n                        <p className={styles.count}>hospitalized</p>\n                    </StyledTableCell> */}\n                </StyledTableRow>\n                )\n            })}\n    </TableBody>\n    )\n\n        const handleRequestSort = (event, property) => {\n            const isAsc = orderBy === property && order === 'asc';\n            setOrder(isAsc ? 'desc' : 'asc');\n            setOrderBy(property);\n          };\n\n        // const filterByState = (e) => {\n        //   const newData = stateData.slice();\n        //     setUpdatedData(\n        //       newData.filter(({state}) => \n        //         // convertState(state.toLowerCase().includes(e.toLowerCase().trim())))\n        //        state.toUpperCase().includes(e.toUpperCase().trim())\n        //       ))\n        //   }\n\n        return (\n            <div className={styles.container}>\n              {stateData.length > 1 ? (\n                <Grid container spacing={3}>\n                  <Grid item xs={12}>\n                    <h1 className={styles.title}>United States</h1>\n                  </Grid>\n                 \n                    {/* <TextField\n                          variant=\"outlined\"\n                          label=\"Search By State\"\n                          inputProps={{ maxLength: 2 }}\n                          // onChange={(e) => {\n                          // // filterByState(e.target.value);\n                          // }}\n                        /> */}\n                \n                  <Grid item xs={12}>\n                    <Paper className={styles.root} elevation={3}>\n                    <TableContainer className={styles.table}>\n                      <Table stickyHeader aria-label=\"sticky table\">\n                        <EnhancedTableHead \n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                        />\n                       {tableBody}\n                    </Table>\n                    </TableContainer>\n                    </Paper>\n                  </Grid>\n                </Grid>\n                  ) : <h1>State Data Not Available</h1>}\n            </div>\n        )\n    }\n\nexport default State;","import React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, Grid, TextField} from '@material-ui/core';\nimport { url } from '../../api/';\nimport { Flag, Loader } from 'semantic-ui-react';\nimport styles from './Countries.module.css';\n\nconst Countries = () => {\n\n    const [countryData, setCountryData] = useState([]);\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('confirmed');\n    const [updatedData, setUpdatedData] = useState([]);\n\n    useEffect(() => {\n        const fetchStats = async () => {\n          const data = await fetch(`${url}/deaths`).then(data => data.json());\n          const grouped =data.reduce((x, value) => {\n            if (!x[value.countryRegion]) {\n                x[value.countryRegion] =[];\n            }\n            x[value.countryRegion].push(value);\n            return x;\n          }, {});\n          const tableData = [];\n          \n          Object.entries(grouped).forEach((country, index) => {\n            let confirmed = 0;\n            let deaths = 0;\n            let recovered = 0;\n            let active = 0;\n            tableData.push({ country: country[0] })\n            country[1].forEach(i => {\n              confirmed += i.confirmed;\n              deaths += i.deaths;\n              recovered += i.recovered;\n              active += i.active;\n              tableData[index].iso2 = i.iso2;\n              tableData[index].confirmed = confirmed;\n              tableData[index].deaths = deaths;\n              tableData[index].recovered = recovered;\n              tableData[index].active = active;\n              tableData[index].mortality = parseFloat((Math.round(deaths * 100) / confirmed).toFixed(1));\n            })\n          })\n          setCountryData(tableData);\n          setUpdatedData(tableData);\n        }\n        fetchStats();\n      }, []);\n\n      if (!countryData) return  \n          <Loader active inline=\"centered\">Loading...</Loader>\n\n\n    // STYLES\n    const StyledTableCell = withStyles(() => ({\n        root: {\n          padding: '10px'\n        },\n        head: {\n          fontWeight: 'bold',\n          textTransform: 'uppercase',\n          fontSize: '1rem'\n        },\n        body: {\n          fontSize: 18,\n          fontWeight: 'bold',\n        },\n      }))(TableCell);\n\n      const StyledTableRow = withStyles((theme) => ({\n        root: {\n          '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n          },\n          padding: '0'\n        },\n      }))(TableRow);\n\n      // Format Numbers with commas\n      function formatNumber(num) {\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n      }\n\n      // Sort functions\n      function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n          return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n          return 1;\n        }\n        return 0;\n      }\n      \n      function getComparator(order, orderBy) {\n        return order === 'asc'\n          ? (a, b) => descendingComparator(a, b, orderBy)\n          : (a, b) => -descendingComparator(a, b, orderBy);\n      }\n      \n      function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n          const order = comparator(a[0], b[0]);\n          if (order !== 0) return order;\n          return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n      }\n\n      // Array of Column Headings\n    const headCells = [\n        { id: \"country\", label: \"COUNTRY\" },\n        { id: \"confirmed\", numeric: true, label: \"POSITIVE\" },\n        { id: \"deaths\", numeric: true, label: \"DEATHS\" },\n        { id: \"recovered\", numeric: true, label: \"RECOVERED\" },\n    ];\n\n    function EnhancedTableHead(props) {\n        const {order, orderBy, onRequestSort } = props;\n        const createSortHandler = (property) => (event) => {\n          onRequestSort(event, property);\n        };        \n\n    return (\n                    <TableHead className={styles.head}>\n                        <StyledTableRow>\n                        {headCells.map(headCell => (\n                           <StyledTableCell\n                             key={headCell.id}\n                             align=\"left\"\n                             width=\"50\"\n                             sortDirection={orderBy === headCell.id ? order : false}\n                           >\n                             <TableSortLabel\n                               active={orderBy === headCell.id}\n                               direction={orderBy === headCell.id ? order : \"asc\"}\n                               onClick={createSortHandler(headCell.id)}\n                             >\n                               {headCell.label}\n                               {orderBy === headCell.id ? (\n                                 <span>\n                                   {order === \"desc\"}\n                                 </span>\n                               ) : null}\n                             </TableSortLabel>\n                           </StyledTableCell>\n                        ))}\n                        </StyledTableRow>\n                    </TableHead>\n    );\n    }\n\n    EnhancedTableHead.propTypes = {\n        onRequestSort: PropTypes.func.isRequired,\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n        orderBy: PropTypes.string.isRequired,\n      };\n\n    const tableBody = (\n        <TableBody>\n        {stableSort(updatedData, getComparator(order, orderBy))\n            .map((data) => {\n                return (\n                    <StyledTableRow key={data.country}>\n                    <StyledTableCell width='50' component=\"th\" scope=\"row\" style={{ fontWeight: 'bold' }}>\n                    <Flag name={data.country.toLowerCase()} />  {data.country}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='20' style={{ color: 'rgba(0, 139, 139, 0.8)' }}>\n                        {formatNumber(data.confirmed)}\n                        <p className={styles.count}>confirmed</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='20' style={{ color: 'rgba(255, 0, 0, 0.8)' }}>\n                        {formatNumber(data.deaths)}\n                        <p className={styles.count}>deaths</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='20' style={{ color: 'rgba(139, 139, 255, 0.9)' }}>\n                        {data.recovered > 0 ? formatNumber(data.recovered) : 0}\n                        <p className={styles.count}>recovered</p>\n                    </StyledTableCell>\n                </StyledTableRow>\n                )\n            })}\n    </TableBody>\n    )\n\n        const handleRequestSort = (event, property) => {\n            const isAsc = orderBy === property && order === 'asc';\n            setOrder(isAsc ? 'desc' : 'asc');\n            setOrderBy(property);\n          };\n\n        const filterByCountry = (e) => {\n          const newData = countryData.slice();\n          setUpdatedData(\n            newData.filter(({country}) => \n              country.toLowerCase().includes(e.toLowerCase().trim()))\n            )\n        }\n\n        return (\n            <div className={styles.container}>\n                {countryData.length > 1 ? (\n                  <Grid container spacing={3}>\n                      <Grid item xs={6}>\n                        <h1 className={styles.title}>All Countries</h1>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <TextField\n                          variant=\"outlined\"\n                          label=\"Search By Country\"\n                          onChange={(e) => {\n                          filterByCountry(e.target.value);\n                          }}\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Paper className={styles.root} elevation={3}>\n                          <TableContainer className={styles.table} >\n                            <Table stickyHeader aria-label=\"sticky table\">\n                              <EnhancedTableHead\n                                order={order}\n                                orderBy={orderBy}\n                                onRequestSort={handleRequestSort}\n                              />\n                              {tableBody}\n                            </Table>\n                          </TableContainer>\n                        </Paper>\n                      </Grid>\n                    </Grid>\n                  ) : \n                  <Loader active inline=\"centered\">Loading...</Loader>\n                }\n              </div>\n        )\n    }\n\nexport default Countries;","import React from 'react';\nimport {Typography, Box, Link} from \"@material-ui/core\";\n\nconst Footer = () => {\n    return (\n        <Box p={4}>\n        <Typography variant=\"body2\" align=\"center\">\n          {\"This statistics for COVID-19 get updated every 8 hours via \"}\n          <Link color=\"primary\" href=\"https://github.com/mathdroid/covid-19-api\">\n            mathdroid API\n          </Link>\n          {\", which accesses data by \"}\n          <Link\n            color=\"primary\"\n            href=\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\"\n          >\n            John Hopkins University CSSE\n          </Link>\n          . <br />\n          {\"Site Source \"}\n          <Link href=\"https://github.com/netmagik/Covid-Tracker\">\n          https://github.com/netmagik/Covid-Tracker\n          </Link>\n          .\n        </Typography>\n      </Box>\n    )\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/covid.2658299a.png\";","import React from 'react';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { Cards, Chart, CountryPicker, States, Countries, Footer } from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/covid.png';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async (country) => {\n       \n        // fetch Data\n        const fetchedData = await fetchData(country)\n        // Set State\n        this.setState({data: fetchedData, country: country});\n    }\n\n    render() {\n        const {data, country} = this.state;\n\n        return (\n            <div className={styles.container}>\n                <div className={styles.header}>\n                    <div className={styles.logo}>\n                        <img className={styles.image} alt=\"Covid-19\" src={coronaImage} />\n                        <h4>COVID-19 TRACKER</h4>\n                    </div>\n  \n                    <div className={styles.nav}>\n                        <AnchorLink href='#countries'>All Countries</AnchorLink>\n                        <AnchorLink href='#states'>United States</AnchorLink>\n                        <AnchorLink href='#chart'>Daily Data</AnchorLink>\n                    </div>\n                \n                </div>\n\n                <Cards data={data}/>\n                <section id=\"countries\"><Countries /></section>\n                <section id=\"states\"><States /></section>\n                <section id=\"chart\"><CountryPicker handleCountryChange={this.handleCountryChange}/></section>\n                <Chart data={data} country={country} />\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Countries_container__39dRV\",\"title\":\"Countries_title__2oHYT\",\"root\":\"Countries_root__SM1Ir\",\"table\":\"Countries_table__1AsEI\",\"count\":\"Countries_count__379gb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"States_container__19-Ce\",\"title\":\"States_title__2UmKz\",\"count\":\"States_count__1ezG7\",\"root\":\"States_root__E7ryp\",\"table\":\"States_table__1EkjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"logo\":\"App_logo__1ItuU\",\"nav\":\"App_nav__1_46_\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\",\"select\":\"CountryPicker_select__2BqZV\",\"selectCountry\":\"CountryPicker_selectCountry__2xsKF\"};"],"sourceRoot":""}