{"version":3,"sources":["components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/States/States.js","components/Countries/Countries.js","images/image.png","components/Footer/Footer.js","App.js","index.js","components/States/States.module.css","components/Countries/Countries.module.css","components/Cards/Cards.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","map","positive","death","date","dateChecked","reverse","fetchCountries","countries","name","console","log","fetchStates","stateData","state","hospitalized","hospitalizedCurrently","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","fontSize","Paper","elevation","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","select","defaultValue","onChange","e","target","i","State","setStateData","order","setOrder","orderBy","setOrderBy","updatedData","setUpdatedData","StyledTableCell","withStyles","root","padding","head","fontWeight","textTransform","body","TableCell","StyledTableRow","theme","palette","action","hover","TableRow","formatNumber","num","toString","replace","descendingComparator","b","headCells","id","numeric","EnhancedTableHead","props","onRequestSort","TableHead","headCell","align","width","sortDirection","TableSortLabel","active","direction","onClick","property","event","tableBody","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","scope","style","count","TextField","inputProps","maxLength","newData","slice","filter","toUpperCase","includes","trim","filterByState","TableContainer","table","Table","stickyHeader","aria-label","Countries","countryData","setCountryData","fetch","then","json","grouped","reduce","x","countryRegion","push","tableData","Object","entries","forEach","iso2","mortality","parseFloat","Math","round","toFixed","fetchStats","Loader","Flag","toLowerCase","filterByCountry","inline","Footer","Box","p","Link","href","App","fetchedData","setState","this","image","alt","src","coronaImage","States","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c197bd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\",\"select\":\"CountryPicker_select__2BqZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading...'\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1>Global</h1>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp \n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of recoveries from COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp \n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Deaths caused by COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nexport const url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableURL = url;\n    if (country) {\n        changeableURL = `${url}/countries/${country}`\n    }\n    try{\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`https://api.covidtracking.com/v1/us/daily.json`)\n        \n        return data\n            .map(({ positive, death, dateChecked}) => ({\n            confirmed: positive,\n            deaths: death,\n            date: dateChecked,\n        }))\n            .reverse();\n\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get('https://covid19.mathdro.id/api/countries');\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const fetchStates = async () => {\n    try {\n        const { data } = await axios.get('https://api.covidtracking.com/v1/states/current.json');\n        return data.map((stateData) => ({\n            state: stateData.state, \n            positive: stateData.positive,\n            death: stateData.death,\n            hospitalized: stateData.hospitalizedCurrently\n         }))\n    } catch (error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Paper } from '@material-ui/core';\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({ data: {confirmed, deaths, recovered}, country }) => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    }, [dailyData])\n\n    // LINE CHART\n    const lineChart = (\n        // if dailyData is available return Line Chart\n        dailyData.length \n        ? (<Line\n            data={\n                {\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }}\n              \n            />\n            // but if it's not available return null\n            ): null\n    )\n\n\n    // BAR CHART\n    const barChart = (\n        confirmed \n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [\n                        {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(255,0,0,0.5)',\n                            'rgba(0,255,0,0.5)',\n                            'rgba(0,0,255,0.5)'],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    }\n                ],\n                }} \n                options={{\n                    legend: { display: false },\n                    title: { \n                        display: true, \n                        text: `Current state in ${country}`,\n                        fontSize: 30 },\n                }}  \n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            <Paper elevation={3}>\n            {country ? barChart : lineChart}  \n            </Paper>\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    }, [])\n\n\n    return (\n        <>\n        <h1>Select Country</h1>\n        <FormControl className={styles.formControl}>\n            <NativeSelect className={styles.select} defaultValue=\"\" onChange={(e) => \n                handleCountryChange(e.target.value)}>\n\n                <option value=\"\">United States</option>\n                {fetchedCountries.map((country, i) => \n                <option key={i} value={country}>\n                    {country}\n                </option>\n\n                )}\n            </NativeSelect>\n        </FormControl>\n        </>\n    )\n}\n\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, Grid } from '@material-ui/core';\nimport { fetchStates } from '../../api/';\nimport styles from './States.module.css';\n\nconst State = (state) => {\n\n    const [stateData, setStateData] = useState([]);\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('positive');\n    const [updatedData, setUpdatedData] = useState([]);\n\n    // Get DATA from the API\n    useEffect(() => {\n        const fetchAPI = async () => {\n          const data = await fetchStates(state);\n            setStateData(data);\n            setUpdatedData(data);\n        }\n        fetchAPI();\n    }, [state])\n\n    // STYLES\n    const StyledTableCell = withStyles(() => ({\n      root: {\n        padding: '10px'\n\n      },\n        head: {\n          fontWeight: 'bold',\n          textTransform: 'uppercase',\n          fontSize: '1rem'\n        },\n        body: {\n          fontSize: 18,\n          fontWeight: 'bold'\n        },\n      }))(TableCell);\n\n      const StyledTableRow = withStyles((theme) => ({\n        root: {\n          '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n          },\n          padding: '0'\n        },\n      }))(TableRow);\n\n      // Format Numbers with commas\n      function formatNumber(num) {\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n      }\n\n      // Sort functions\n      function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n          return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n          return 1;\n        }\n        return 0;\n      }\n      \n      function getComparator(order, orderBy) {\n        return order === 'asc'\n          ? (a, b) => descendingComparator(a, b, orderBy)\n          : (a, b) => -descendingComparator(a, b, orderBy);\n      }\n      \n      function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n          const order = comparator(a[0], b[0]);\n          if (order !== 0) return order;\n          return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n      }\n\n      // Array of Column Headings\n    const headCells = [\n        { id: \"state\", label: \"STATE\" },\n        { id: \"positive\", numeric: true, label: \"POSITIVE\" },\n        { id: \"death\", numeric: true, label: \"DEATHS\" },\n        { id: \"hospitalized\", numeric: true, label: \"HOSPITALIZED\" },\n    ];\n\n    function EnhancedTableHead(props) {\n        const {order, orderBy, onRequestSort } = props;\n        const createSortHandler = (property) => (event) => {\n          onRequestSort(event, property);\n        };        \n\n    return (\n                    <TableHead className={styles.head}>\n                        <TableRow>\n                        {headCells.map(headCell => (\n                           <StyledTableCell\n                             key={headCell.id}\n                             align=\"left\"\n                             width=\"50\"\n                             sortDirection={orderBy === headCell.id ? order : false}\n                           >\n                             <TableSortLabel\n                               active={orderBy === headCell.id}\n                               direction={orderBy === headCell.id ? order : \"asc\"}\n                               onClick={createSortHandler(headCell.id)}\n                             >\n                               {headCell.label}\n                               {orderBy === headCell.id ? (\n                                 <span>\n                                   {order === \"desc\"}\n                                 </span>\n                               ) : null}\n                             </TableSortLabel>\n                           </StyledTableCell>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n    );\n    }\n\n    EnhancedTableHead.propTypes = {\n        onRequestSort: PropTypes.func.isRequired,\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n        orderBy: PropTypes.string.isRequired,\n      };\n\n    const tableBody = (\n    <TableBody>\n        {stableSort(updatedData, getComparator(order, orderBy))\n            .map((data) => {\n                return (\n                    <StyledTableRow key={data.state}>\n                    <StyledTableCell width='100' component=\"th\" scope=\"row\">\n                        {data.state}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(0, 139, 139, 0.8)' }}>\n                        {formatNumber(data.positive)}\n                        <p className={styles.count}>confirmed</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(255, 0, 0, 0.8)' }}>\n                        {formatNumber(data.death)}\n                        <p className={styles.count}>deaths</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(139, 139, 255, 0.9)' }}>\n                        {data.hospitalized > 0 ? formatNumber(data.hospitalized) : 0}\n                        <p className={styles.count}>hospitalized</p>\n                    </StyledTableCell>\n                </StyledTableRow>\n                )\n            })}\n    </TableBody>\n    )\n\n        const handleRequestSort = (event, property) => {\n            const isAsc = orderBy === property && order === 'asc';\n            setOrder(isAsc ? 'desc' : 'asc');\n            setOrderBy(property);\n          };\n\n        const filterByState = (e) => {\n          const newData = stateData.slice();\n            setUpdatedData(\n              newData.filter(({state}) => \n                // convertState(state.toLowerCase().includes(e.toLowerCase().trim())))\n               state.toUpperCase().includes(e.toUpperCase().trim())\n              ))\n          }\n\n        return (\n            <div className={styles.container}>\n              {stateData.length > 1 ? (\n                <Grid container spacing={3}>\n                  <Grid item xs={6}>\n                    <h1 className={styles.title}>United States</h1>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                          variant=\"outlined\"\n                          label=\"Search By State\"\n                          inputProps={{ maxLength: 2 }}\n                          onChange={(e) => {\n                          filterByState(e.target.value);\n                          }}\n                        />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Paper className={styles.root} elevation={3}>\n                    <TableContainer className={styles.table}>\n                      <Table stickyHeader aria-label=\"sticky table\">\n                        <EnhancedTableHead \n                            order={order}\n                            orderBy={orderBy}\n                            onRequestSort={handleRequestSort}\n                        />\n                       {tableBody}\n                    </Table>\n                    </TableContainer>\n                    </Paper>\n                  </Grid>\n                </Grid>\n                  ) : <h1>State Data Not Available</h1>}\n            </div>\n        )\n    }\n\nexport default State;","import React, { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport { withStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, Grid, TextField} from '@material-ui/core';\nimport { url } from '../../api/';\nimport { Flag, Loader } from 'semantic-ui-react';\nimport styles from './Countries.module.css';\n\nconst Countries = () => {\n\n    const [countryData, setCountryData] = useState([]);\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('confirmed');\n    const [updatedData, setUpdatedData] = useState([]);\n\n    useEffect(() => {\n        const fetchStats = async () => {\n          const data = await fetch(`${url}/deaths`).then(data => data.json());\n          const grouped =data.reduce((x, value) => {\n            if (!x[value.countryRegion]) {\n                x[value.countryRegion] =[];\n            }\n            x[value.countryRegion].push(value);\n            return x;\n          }, {});\n          const tableData = [];\n          \n          Object.entries(grouped).forEach((country, index) => {\n            let confirmed = 0;\n            let deaths = 0;\n            let recovered = 0;\n            let active = 0;\n            tableData.push({ country: country[0] })\n            country[1].forEach(i => {\n              confirmed += i.confirmed;\n              deaths += i.deaths;\n              recovered += i.recovered;\n              active += i.active;\n              tableData[index].iso2 = i.iso2;\n              tableData[index].confirmed = confirmed;\n              tableData[index].deaths = deaths;\n              tableData[index].recovered = recovered;\n              tableData[index].active = active;\n              tableData[index].mortality = parseFloat((Math.round(deaths * 100) / confirmed).toFixed(1));\n            })\n          })\n          setCountryData(tableData);\n          setUpdatedData(tableData);\n        }\n        fetchStats();\n      }, []);\n\n      if (!countryData) return  \n          <Loader active inline=\"centered\">Loading...</Loader>\n\n\n    // STYLES\n    const StyledTableCell = withStyles(() => ({\n        root: {\n          padding: '10px'\n        },\n        head: {\n          fontWeight: 'bold',\n          textTransform: 'uppercase',\n          fontSize: '1rem'\n        },\n        body: {\n          fontSize: 18,\n          fontWeight: 'bold',\n        },\n      }))(TableCell);\n\n      const StyledTableRow = withStyles((theme) => ({\n        root: {\n          '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n          },\n          padding: '0'\n        },\n      }))(TableRow);\n\n      // Format Numbers with commas\n      function formatNumber(num) {\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n      }\n\n      // Sort functions\n      function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n          return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n          return 1;\n        }\n        return 0;\n      }\n      \n      function getComparator(order, orderBy) {\n        return order === 'asc'\n          ? (a, b) => descendingComparator(a, b, orderBy)\n          : (a, b) => -descendingComparator(a, b, orderBy);\n      }\n      \n      function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n          const order = comparator(a[0], b[0]);\n          if (order !== 0) return order;\n          return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n      }\n\n      // Array of Column Headings\n    const headCells = [\n        { id: \"country\", label: \"COUNTRY\" },\n        { id: \"confirmed\", numeric: true, label: \"POSITIVE\" },\n        { id: \"deaths\", numeric: true, label: \"DEATHS\" },\n        { id: \"recovered\", numeric: true, label: \"RECOVERED\" },\n    ];\n\n    function EnhancedTableHead(props) {\n        const {order, orderBy, onRequestSort } = props;\n        const createSortHandler = (property) => (event) => {\n          onRequestSort(event, property);\n        };        \n\n    return (\n                    <TableHead className={styles.head}>\n                        <StyledTableRow>\n                        {headCells.map(headCell => (\n                           <StyledTableCell\n                             key={headCell.id}\n                             align=\"left\"\n                             width=\"50\"\n                             sortDirection={orderBy === headCell.id ? order : false}\n                           >\n                             <TableSortLabel\n                               active={orderBy === headCell.id}\n                               direction={orderBy === headCell.id ? order : \"asc\"}\n                               onClick={createSortHandler(headCell.id)}\n                             >\n                               {headCell.label}\n                               {orderBy === headCell.id ? (\n                                 <span>\n                                   {order === \"desc\"}\n                                 </span>\n                               ) : null}\n                             </TableSortLabel>\n                           </StyledTableCell>\n                        ))}\n                        </StyledTableRow>\n                    </TableHead>\n    );\n    }\n\n    EnhancedTableHead.propTypes = {\n        onRequestSort: PropTypes.func.isRequired,\n        order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n        orderBy: PropTypes.string.isRequired,\n      };\n\n    const tableBody = (\n        <TableBody>\n        {stableSort(updatedData, getComparator(order, orderBy))\n            .map((data) => {\n                return (\n                    <StyledTableRow key={data.country}>\n                    <StyledTableCell width='100' component=\"th\" scope=\"row\" style={{ fontWeight: 'bold' }}>\n                    <Flag name={data.country.toLowerCase()} />  {data.country}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(0, 139, 139, 0.8)' }}>\n                        {formatNumber(data.confirmed)}\n                        <p className={styles.count}>confirmed</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(255, 0, 0, 0.8)' }}>\n                        {formatNumber(data.deaths)}\n                        <p className={styles.count}>deaths</p>\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\" width='50' style={{ color: 'rgba(139, 139, 255, 0.9)' }}>\n                        {data.recovered > 0 ? formatNumber(data.recovered) : 0}\n                        <p className={styles.count}>recovered</p>\n                    </StyledTableCell>\n                </StyledTableRow>\n                )\n            })}\n    </TableBody>\n    )\n\n        const handleRequestSort = (event, property) => {\n            const isAsc = orderBy === property && order === 'asc';\n            setOrder(isAsc ? 'desc' : 'asc');\n            setOrderBy(property);\n          };\n\n        const filterByCountry = (e) => {\n          const newData = countryData.slice();\n          setUpdatedData(\n            newData.filter(({country}) => \n              country.toLowerCase().includes(e.toLowerCase().trim()))\n            )\n        }\n\n        return (\n            <div className={styles.container}>\n                {countryData.length > 1 ? (\n                  <Grid container spacing={3}>\n                      <Grid item xs={6}>\n                        <h1 className={styles.title}>All Countries</h1>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <TextField\n                          variant=\"outlined\"\n                          label=\"Search By Country\"\n                          onChange={(e) => {\n                          filterByCountry(e.target.value);\n                          }}\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <Paper className={styles.root} elevation={3}>\n                          <TableContainer className={styles.table} >\n                            <Table stickyHeader aria-label=\"sticky table\">\n                              <EnhancedTableHead\n                                order={order}\n                                orderBy={orderBy}\n                                onRequestSort={handleRequestSort}\n                              />\n                              {tableBody}\n                            </Table>\n                          </TableContainer>\n                        </Paper>\n                      </Grid>\n                    </Grid>\n                  ) : \n                  <Loader active inline=\"centered\">Loading...</Loader>\n                }\n              </div>\n        )\n    }\n\nexport default Countries;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport {Typography, Box, Link} from \"@material-ui/core\";\n\nconst Footer = () => {\n    return (\n        <Box p={4}>\n        <Typography variant=\"body2\" align=\"center\">\n          {\"This statistics for COVID-19 get updated every 8 hours via \"}\n          <Link color=\"primary\" href=\"https://github.com/mathdroid/covid-19-api\">\n            mathdroid API\n          </Link>\n          {\", which accesses data by \"}\n          <Link\n            color=\"primary\"\n            href=\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\"\n          >\n            John Hopkins University CSSE\n          </Link>\n          . <br />\n          {\"Site Source \"}\n          <Link href=\"https://netmagik.github.io/Covid-Tracker/\">\n          https://netmagik.github.io/Covid-Tracker/\n          </Link>\n          .\n        </Typography>\n      </Box>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport {Cards, Chart, CountryPicker, States, Countries} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async (country) => {\n       \n        // fetch Data\n        const fetchedData = await fetchData(country)\n        // Set State\n        this.setState({data: fetchedData, country: country});\n    }\n\n    render() {\n        const {data, country} = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} alt=\"Covid-19\" src={coronaImage} />\n                <Cards data={data}/>\n                <Countries />\n                <States />\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country} />\n                <Footer />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"States_container__19-Ce\",\"title\":\"States_title__2UmKz\",\"count\":\"States_count__1ezG7\",\"root\":\"States_root__E7ryp\",\"table\":\"States_table__1EkjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Countries_container__39dRV\",\"title\":\"Countries_title__2oHYT\",\"root\":\"Countries_root__SM1Ir\",\"table\":\"Countries_table__1AsEI\",\"count\":\"Countries_count__379gb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};"],"sourceRoot":""}