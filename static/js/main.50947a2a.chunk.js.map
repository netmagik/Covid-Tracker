{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","images/image.png","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableURL","axios","get","fetchDailyData","map","positive","death","date","dateChecked","reverse","fetchCountries","countries","name","console","log","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","fontSize","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","select","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","alt","src","coronaImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50947a2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid, StylesProvider } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading...'\n    }\n\n    return (\n        <div className={styles.container}>\n            <h1>Global</h1>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Infected\n                        </Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp \n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of active cases of COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Recovered\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp \n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Number of recoveries from COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Deaths\n                        </Typography>\n                        <Typography variant=\"h5\">\n                        <CountUp \n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">\n                        {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant=\"body2\">\n                            Deaths caused by COVID-19\n                        </Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    \n    let changeableURL = url;\n\n    if (country) {\n        changeableURL = `${url}/countries/${country}`\n    }\n\n    try{\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableURL);\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`https://api.covidtracking.com/v1/us/daily.json`)\n        \n        return data\n            .map(({ positive, death, dateChecked}) => ({\n            confirmed: positive,\n            deaths: death,\n            date: dateChecked,\n        }))\n            .reverse();\n\n    } catch (error) {\n        return error;\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries }} = await axios.get('https://covid19.mathdro.id/api/countries');\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({ data: {confirmed, deaths, recovered}, country }) => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        console.log(dailyData)\n\n        fetchAPI();\n    }, [])\n\n    // LINE CHART\n    const lineChart = (\n        // if dailyData is available return Line Chart\n        dailyData.length \n        ? (<Line\n            data={\n                {\n                labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5)',\n                    fill: true,\n                }],\n            }}\n              \n            />\n            // but if it's not available return null\n            ): null\n    )\n\n\n    // BAR CHART\n    const barChart = (\n        confirmed \n        ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [\n                        {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(255,0,0,0.5)',\n                            'rgba(0,255,0,0.5)',\n                            'rgba(0,0,255,0.5)'],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    }\n                ],\n                }} \n                options={{\n                    legend: { display: false },\n                    title: { \n                        display: true, \n                        text: `Current state in ${country}`,\n                        fontSize: 30 },\n                }}  \n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}  \n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n    }, [])\n\n\n    return (\n        <>\n        <h1>Select Country</h1>\n        <FormControl className={styles.formControl}>\n            <NativeSelect className={styles.select} defaultValue=\"\" onChange={(e) => \n                handleCountryChange(e.target.value)}>\n\n                <option value=\"\">United States</option>\n                {fetchedCountries.map((country, i) => \n                <option key={i} value={country}>\n                    {country}\n                </option>\n\n                )}\n            </NativeSelect>\n        </FormControl>\n        </>\n    )\n}\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({data: fetchedData});\n    }\n\n    handleCountryChange = async (country) => {\n       \n        // fetch Data\n        const fetchedData = await fetchData(country)\n        console.log(fetchedData);\n        console.log(country)\n        // Set State\n        this.setState({data: fetchedData, country: country});\n    }\n\n    render() {\n        const {data, country} = this.state;\n\n        return (\n            <div className={styles.container}>\n                <img className={styles.image} alt=\"Covid-19\" src={coronaImage} />\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country} />\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\",\"select\":\"CountryPicker_select__2BqZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};"],"sourceRoot":""}